ext{
    /**
     * Bağımlılıkların versiyonlanması işlemini yapıyoruz. değerler K/V (Key/Value) şeklinde tutulur
     */
    versions = [
            springBoot              : "2.7.10",
            lombok                  : "1.18.26",
            mapstruct               : "1.5.3.Final",
            postgresql              : "42.5.4",
            swaggerui               : "1.6.14",
            jwt                     : "4.3.0",
            springCloud             : "3.1.6",
            circuitBreaker          : "2.1.6"
    ]
    /**
     * Bu kısımda bağımlılıkların listesini oluşturuyoruz. K/V
     * 1. Bağımlılık için ad belirleyin
     * 2. : (iki nokta)
     * 3. Projenin grupId si (org.springframework.boot)
     * 4. : (iki nokta)
     * 5. ArtifactId (spring-boot-starter-web)
     * 6. : (iki nokta)
     * 7. Version numarası (v.0.01) ya da yukarıda belirtilen version adını ekliyoruz. ($versions.springBoot)
     */
    libs = [
            springBootWeb           : "org.springframework.boot:spring-boot-starter-web:$versions.springBoot",
            springBootDataJpa       : "org.springframework.boot:spring-boot-starter-data-jpa:$versions.springBoot",
            springBootValidation    : "org.springframework.boot:spring-boot-starter-validation:$versions.springBoot",
            lombok                  : "org.projectlombok:lombok:$versions.lombok",
            postgresql              : "org.postgresql:postgresql:$versions.postgresql",
            mapstruct               : "org.mapstruct:mapstruct:$versions.mapstruct",
            mapstructProcessor      : "org.mapstruct:mapstruct-processor:$versions.mapstruct",
            swaggerui               : "org.springdoc:springdoc-openapi-ui:$versions.swaggerui",
            jwt                     : "com.auth0:java-jwt:$versions.jwt",
            springBootAmqp          : "org.springframework.boot:spring-boot-starter-amqp:$versions.springBoot",

            springBootStarterElasticsearch: "org.springframework.boot:spring-boot-starter-data-elasticsearch:$versions.springBoot",
            springBootStarterSecurity  : "org.springframework.boot:spring-boot-starter-security:$versions.springBoot",
            springCloudOpenFeign    : "org.springframework.cloud:spring-cloud-starter-openfeign:$versions.springCloud",


            springCloudConfigServer: "org.springframework.cloud:spring-cloud-config-server:$versions.springCloud",
            springCloudConfigClient:  "org.springframework.cloud:spring-cloud-config-client:$versions.springCloud",
            springCloudConfigStarter: "org.springframework.cloud:spring-cloud-starter-config:$versions.springCloud",
            springCloudStarterGateway : "org.springframework.cloud:spring-cloud-starter-gateway:$versions.springCloud",
            springCloudCircuitBreaker:"org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:$versions.circuitBreaker",
            springCloudCircuitReactor:"org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j:$versions.circuitBreaker",

            springCloudConfigServer: "org.springframework.cloud:spring-cloud-config-server:$versions.springCloud",
            springCloudConfigClient:  "org.springframework.cloud:spring-cloud-config-client:$versions.springCloud",
            springCloudConfigStarter: "org.springframework.cloud:spring-cloud-starter-config:$versions.springCloud",
            springCloudStarterGateway : "org.springframework.cloud:spring-cloud-starter-gateway:$versions.springCloud",
            springCloudCircuitBreaker:"org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:$versions.circuitBreaker",
            springCloudCircuitReactor:"org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j:$versions.circuitBreaker",
            springBootMailSender: "org.springframework.boot:spring-boot-starter-mail:$versions.springBoot"

    ]
}